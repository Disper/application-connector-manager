// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	apperrors "github.com/kyma-project/kyma/components/compass-runtime-agent/internal/apperrors"
	kyma "github.com/kyma-project/kyma/components/compass-runtime-agent/internal/kyma"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kyma-project/kyma/components/compass-runtime-agent/internal/kyma/model"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Apply provides a mock function with given fields: applications, normalizeAppNames
func (_m *Service) Apply(applications []model.Application, normalizeAppNames bool) ([]kyma.Result, apperrors.AppError) {
	ret := _m.Called(applications, normalizeAppNames)

	var r0 []kyma.Result
	var r1 apperrors.AppError
	if rf, ok := ret.Get(0).(func([]model.Application, bool) ([]kyma.Result, apperrors.AppError)); ok {
		return rf(applications, normalizeAppNames)
	}
	if rf, ok := ret.Get(0).(func([]model.Application, bool) []kyma.Result); ok {
		r0 = rf(applications, normalizeAppNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kyma.Result)
		}
	}

	if rf, ok := ret.Get(1).(func([]model.Application, bool) apperrors.AppError); ok {
		r1 = rf(applications, normalizeAppNames)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(apperrors.AppError)
		}
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
